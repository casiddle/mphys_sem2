import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from matplotlib.colors import Normalize
import os

# Get the directory where the current script is located
script_dir = os.path.dirname(os.path.abspath(__file__))
# Change the current working directory to the script directory
os.chdir(script_dir)

def theta_to_r(theta, distance):
    r=distance*np.tan(theta)
    return r


data_set=r"data_sets\output_test_96.csv"
df = pd.read_csv(data_set)
df = df.drop(columns=['Initial emittance'])


# Apply the function to the column
df['Mean Radiation Radius'] = df['Mean Theta'].apply(lambda theta: theta_to_r(theta, 11))
df['UV Percentage']=df['No. UV Photons']/df['Total no. Photons']
df['Other Percentage']=df['No. Other Photons']/df['Total no. Photons']
df['Total Percentage']=df['UV Percentage']+df['X-ray Percentage']+df['Other Percentage']
print(df.head())
df = df.drop(columns=['No. UV Photons','No. Other Photons','No. X-ray Photons','Total Percentage'])


print(df.columns)
print(df.describe(include='all'))


# Calculate the correlation matrices for different methods
correlation_pearson = df.corr(method='pearson')
correlation_spearman = df.corr(method='spearman')
correlation_kendall = df.corr(method='kendall')

# # Plot Pearson correlation matrix with bwr colormap
# plt.figure(figsize=(12, 10))
# sns.heatmap(correlation_pearson, annot=True, cmap="bwr", fmt=".2f", linewidths=0.5)
# plt.title("Pearson Correlation Matrix")
# #plt.show()

# # Plot Spearman correlation matrix with bwr colormap
# plt.figure(figsize=(12, 10))
# sns.heatmap(correlation_spearman, annot=True, cmap="bwr", fmt=".2f", linewidths=0.5)
# plt.title("Spearman Correlation Matrix")
# #plt.show()

# # Plot Kendall correlation matrix with bwr colormap
# plt.figure(figsize=(12, 10))
# sns.heatmap(correlation_kendall, annot=True, cmap="bwr", fmt=".2f", linewidths=0.5)
# plt.title("Kendall Correlation Matrix")
# #plt.show()

#Rank correlations
# Convert the correlation matrix into a long format
correlation_long = correlation_kendall.unstack().reset_index()
# Rename columns for clarity
correlation_long.columns = ['Feature 1', 'Feature 2', 'Correlation']
# Remove self-correlations (where Feature 1 == Feature 2)
correlation_long = correlation_long[correlation_long['Feature 1'] != correlation_long['Feature 2']]
# Drop duplicate pairs (each correlation appears twice in a symmetric matrix)
correlation_long['Sorted Pair'] = correlation_long.apply(lambda x: tuple(sorted([x['Feature 1'], x['Feature 2']])), axis=1)
correlation_long = correlation_long.drop_duplicates(subset=['Sorted Pair']).drop(columns=['Sorted Pair'])
# Sort by absolute correlation value (strongest relationships first)
correlation_long = correlation_long.reindex(correlation_long['Correlation'].abs().sort_values(ascending=False).index)
# Display the ranked correlation pairs
print(correlation_long)
# Save the ranked correlation pairs to a CSV file
correlation_long.to_csv('correlation_matrix_ranked.csv', index=False)

correlation_df=pd.read_csv('correlation_matrix_ranked.csv')

# Filter rows where 'Feature 1' or 'Feature 2' contains 'Emittance'
emittance_filtered_df = correlation_df[(correlation_df["Feature 1"]=="Emittance") | (correlation_df["Feature 2"]=="Emittance")]
print(emittance_filtered_df.head(10))

beam_spread_filtered_df = correlation_df[(correlation_df["Feature 1"]=="Beam Spread") | (correlation_df["Feature 2"]=="Beam Spread")]
print(beam_spread_filtered_df.head(10))

beam_energy_filtered_df = correlation_df[(correlation_df["Feature 1"]=="Beam Energy") | (correlation_df["Feature 2"]=="Beam Energy")]
print(beam_energy_filtered_df.head(10))


X = df[['Emittance','Beam Spread','Beam Energy', 'X-ray Percentage',
        'X-ray Critical Energy','Mean Radiation Radius','UV Percentage','Other Percentage','Critical Energy']]

# correlation_matrix = X.corr(method='kendall')
# plt.figure(figsize=(14, 12))
# sns.heatmap(correlation_matrix, annot=True, cmap="bwr", fmt=".2f", linewidths=0.5)
# plt.title("Heatmap for Correlation Matrix")
# plt.xticks(rotation=45, ha='right')
# plt.tight_layout()
# plt.savefig('Plots/correlation_heatmap.png')
# #plt.show()

set_radius=1
emittance_check_df=df[['Emittance','X-ray Percentage',
        'X-ray Critical Energy','Mean Radiation Radius','UV Percentage','Other Percentage','Critical Energy','Set Radius']]

red_points = emittance_check_df[emittance_check_df['Set Radius'] == set_radius]
other_points = emittance_check_df[emittance_check_df['Set Radius'] != set_radius]
#other_points = emittance_check_df[emittance_check_df['Set Radius'] == 0]


# Create a figure with a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Plot Emittance vs Mean Radiation Radius on the first subplot (axes[0, 0])
axes[0, 0].scatter(red_points['Emittance'], red_points['Mean Radiation Radius'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 0].scatter(other_points['Emittance'], other_points['Mean Radiation Radius'], color='blue', alpha=0.6)
axes[0, 0].set_title('Emittance vs Mean Radiation Radius')
axes[0, 0].set_xlabel('Emittance')
axes[0, 0].set_ylabel('Mean Radiation Radius')
axes[0, 0].grid(True)

# Plot Emittance vs Critical Energy on the second subplot (axes[0, 1])
axes[0, 1].scatter(red_points['Emittance'], red_points['Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 1].scatter(other_points['Emittance'], other_points['Critical Energy'], color='blue', alpha=0.6)
axes[0, 1].set_title('Emittance vs Critical Energy')
axes[0, 1].set_xlabel('Emittance')
axes[0, 1].set_ylabel('Critical Energy')
axes[0, 1].grid(True)

# Plot Emittance vs Other Percentage on the third subplot (axes[0, 2])
axes[0, 2].scatter(red_points['Emittance'], red_points['Other Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 2].scatter(other_points['Emittance'], other_points['Other Percentage'], color='blue', alpha=0.6)
axes[0, 2].set_title('Emittance vs Other Percentage')
axes[0, 2].set_xlabel('Emittance')
axes[0, 2].set_ylabel('Other Percentage')
axes[0, 2].grid(True)

# Plot Emittance vs X-ray Percentage on the fourth subplot (axes[1, 0])
axes[1, 0].scatter(red_points['Emittance'], red_points['X-ray Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 0].scatter(other_points['Emittance'], other_points['X-ray Percentage'], color='blue', alpha=0.6)
axes[1, 0].set_title('Emittance vs X-ray Percentage')
axes[1, 0].set_xlabel('Emittance')
axes[1, 0].set_ylabel('X-ray Percentage')
axes[1, 0].grid(True)

# Plot Emittance vs X-ray Critical Energy on the fifth subplot (axes[1, 1])
axes[1, 1].scatter(red_points['Emittance'], red_points['X-ray Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 1].scatter(other_points['Emittance'], other_points['X-ray Critical Energy'], color='blue', alpha=0.6)
axes[1, 1].set_title('Emittance vs X-ray Critical Energy')
axes[1, 1].set_xlabel('Emittance')
axes[1, 1].set_ylabel('X-ray Critical Energy')
axes[1, 1].grid(True)

# Plot Emittance vs UV Percentage on the sixth subplot (axes[1, 2])
axes[1, 2].scatter(red_points['Emittance'], red_points['UV Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 2].scatter(other_points['Emittance'], other_points['UV Percentage'], color='blue', alpha=0.6)
axes[1, 2].set_title('Emittance vs UV Percentage')
axes[1, 2].set_xlabel('Emittance')
axes[1, 2].set_ylabel('UV Percentage')
axes[1, 2].grid(True)

# Adjust layout for better spacing
plt.tight_layout()
# Show the plots
plt.legend()
plt.savefig('Plots/emittance_parameters_plot.png')
#plt.show()

# Create the DataFrame with relevant columns
beam_spread_check_df = df[['Beam Spread', 'X-ray Percentage', 'X-ray Critical Energy', 'Mean Radiation Radius', 
                           'UV Percentage', 'Other Percentage', 'Critical Energy', 'Set Radius']]

# Split the data based on Set Radius
red_points = beam_spread_check_df[beam_spread_check_df['Set Radius'] == set_radius]
other_points = beam_spread_check_df[beam_spread_check_df['Set Radius'] != set_radius]

# Create a figure with a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Plot Beam Spread vs Mean Radiation Radius on the first subplot (axes[0, 0])
axes[0, 0].scatter(red_points['Beam Spread'], red_points['Mean Radiation Radius'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 0].scatter(other_points['Beam Spread'], other_points['Mean Radiation Radius'], color='blue', alpha=0.6)
axes[0, 0].set_title('Beam Spread vs Mean Radiation Radius')
axes[0, 0].set_xlabel('Beam Spread')
axes[0, 0].set_ylabel('Mean Radiation Radius')
axes[0, 0].grid(True)

# Plot Beam Spread vs Critical Energy on the second subplot (axes[0, 1])
axes[0, 1].scatter(red_points['Beam Spread'], red_points['Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 1].scatter(other_points['Beam Spread'], other_points['Critical Energy'], color='blue', alpha=0.6)
axes[0, 1].set_title('Beam Spread vs Critical Energy')
axes[0, 1].set_xlabel('Beam Spread')
axes[0, 1].set_ylabel('Critical Energy')
axes[0, 1].grid(True)

# Plot Beam Spread vs Other Percentage on the third subplot (axes[0, 2])
axes[0, 2].scatter(red_points['Beam Spread'], red_points['Other Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 2].scatter(other_points['Beam Spread'], other_points['Other Percentage'], color='blue', alpha=0.6)
axes[0, 2].set_title('Beam Spread vs Other Percentage')
axes[0, 2].set_xlabel('Beam Spread')
axes[0, 2].set_ylabel('Other Percentage')
axes[0, 2].grid(True)

# Plot Beam Spread vs X-ray Percentage on the fourth subplot (axes[1, 0])
axes[1, 0].scatter(red_points['Beam Spread'], red_points['X-ray Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 0].scatter(other_points['Beam Spread'], other_points['X-ray Percentage'], color='blue', alpha=0.6)
axes[1, 0].set_title('Beam Spread vs X-ray Percentage')
axes[1, 0].set_xlabel('Beam Spread')
axes[1, 0].set_ylabel('X-ray Percentage')
axes[1, 0].grid(True)

# Plot Beam Spread vs X-ray Critical Energy on the fifth subplot (axes[1, 1])
axes[1, 1].scatter(red_points['Beam Spread'], red_points['X-ray Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 1].scatter(other_points['Beam Spread'], other_points['X-ray Critical Energy'], color='blue', alpha=0.6)
axes[1, 1].set_title('Beam Spread vs X-ray Critical Energy')
axes[1, 1].set_xlabel('Beam Spread')
axes[1, 1].set_ylabel('X-ray Critical Energy')
axes[1, 1].grid(True)

# Plot Beam Spread vs UV Percentage on the sixth subplot (axes[1, 2])
axes[1, 2].scatter(red_points['Beam Spread'], red_points['UV Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 2].scatter(other_points['Beam Spread'], other_points['UV Percentage'], color='blue', alpha=0.6)
axes[1, 2].set_title('Beam Spread vs UV Percentage')
axes[1, 2].set_xlabel('Beam Spread')
axes[1, 2].set_ylabel('UV Percentage')
axes[1, 2].grid(True)

# Adjust layout for better spacing
plt.tight_layout()

# Show the plots
plt.legend()
plt.savefig('Plots/beam_spread_parameters_plot.png')
#plt.show()

# Create the DataFrame with relevant columns
beam_energy_check_df = df[['Beam Energy', 'X-ray Percentage', 'X-ray Critical Energy', 'Mean Radiation Radius', 
                           'UV Percentage', 'Other Percentage', 'Critical Energy', 'Set Radius']]

# Split the data based on Set Radius
red_points = beam_energy_check_df[beam_energy_check_df['Set Radius'] == set_radius]
other_points = beam_energy_check_df[beam_energy_check_df['Set Radius'] != set_radius]

# Create a figure with a 2x3 grid of subplots
fig, axes = plt.subplots(2, 3, figsize=(18, 12))

# Plot Beam Energy vs Mean Radiation Radius on the first subplot (axes[0, 0])
axes[0, 0].scatter(red_points['Beam Energy'], red_points['Mean Radiation Radius'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 0].scatter(other_points['Beam Energy'], other_points['Mean Radiation Radius'], color='blue', alpha=0.6)
axes[0, 0].set_title('Beam Energy vs Mean Radiation Radius')
axes[0, 0].set_xlabel('Beam Energy')
axes[0, 0].set_ylabel('Mean Radiation Radius')
axes[0, 0].grid(True)

# Plot Beam Energy vs Critical Energy on the second subplot (axes[0, 1])
axes[0, 1].scatter(red_points['Beam Energy'], red_points['Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 1].scatter(other_points['Beam Energy'], other_points['Critical Energy'], color='blue', alpha=0.6)
axes[0, 1].set_title('Beam Energy vs Critical Energy')
axes[0, 1].set_xlabel('Beam Energy')
axes[0, 1].set_ylabel('Critical Energy')
axes[0, 1].grid(True)

# Plot Beam Energy vs Other Percentage on the third subplot (axes[0, 2])
axes[0, 2].scatter(red_points['Beam Energy'], red_points['Other Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[0, 2].scatter(other_points['Beam Energy'], other_points['Other Percentage'], color='blue', alpha=0.6)
axes[0, 2].set_title('Beam Energy vs Other Percentage')
axes[0, 2].set_xlabel('Beam Energy')
axes[0, 2].set_ylabel('Other Percentage')
axes[0, 2].grid(True)

# Plot Beam Energy vs X-ray Percentage on the fourth subplot (axes[1, 0])
axes[1, 0].scatter(red_points['Beam Energy'], red_points['X-ray Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 0].scatter(other_points['Beam Energy'], other_points['X-ray Percentage'], color='blue', alpha=0.6)
axes[1, 0].set_title('Beam Energy vs X-ray Percentage')
axes[1, 0].set_xlabel('Beam Energy')
axes[1, 0].set_ylabel('X-ray Percentage')
axes[1, 0].grid(True)

# Plot Beam Energy vs X-ray Critical Energy on the fifth subplot (axes[1, 1])
axes[1, 1].scatter(red_points['Beam Energy'], red_points['X-ray Critical Energy'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 1].scatter(other_points['Beam Energy'], other_points['X-ray Critical Energy'], color='blue', alpha=0.6)
axes[1, 1].set_title('Beam Energy vs X-ray Critical Energy')
axes[1, 1].set_xlabel('Beam Energy')
axes[1, 1].set_ylabel('X-ray Critical Energy')
axes[1, 1].grid(True)

# Plot Beam Energy vs UV Percentage on the sixth subplot (axes[1, 2])
axes[1, 2].scatter(red_points['Beam Energy'], red_points['UV Percentage'], color='red', alpha=0.6, label=f'Set Radius = {set_radius}')
axes[1, 2].scatter(other_points['Beam Energy'], other_points['UV Percentage'], color='blue', alpha=0.6)
axes[1, 2].set_title('Beam Energy vs UV Percentage')
axes[1, 2].set_xlabel('Beam Energy')
axes[1, 2].set_ylabel('UV Percentage')
axes[1, 2].grid(True)

# Adjust layout for better spacing
plt.tight_layout()

# Show the plots
plt.legend()
plt.savefig('Plots/beam_energy_parameters_plot.png')
#plt.show()